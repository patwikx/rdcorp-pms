// Property Management System - Prisma Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite" based on your preference
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// User and Role Management
model User {
  id            String    @id @default(uuid())
  username      String?   @unique
  firstName     String?
  lastName      String?
  passwordHash  String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  isActive      Boolean   @default(true) @map("is_active")

  // Relations
  accounts            Account[]
  sessions            Session[]
  businessUnitMembers BusinessUnitMember[]
  createdProperties   Property[]           @relation("PropertyCreator")
  updatedProperties   Property[]           @relation("PropertyUpdater")
  approvals           PropertyApproval[]
  releases            PropertyRelease[]    @relation("ReleasedBy")
  approvedReleases    PropertyRelease[]    @relation("ApprovedByRelease")
  receivedReleases    PropertyRelease[]    @relation("ReceivedByRelease")
  turnovers           PropertyTurnover[]   @relation("TurnedOverBy")
  receivedTurnovers   PropertyTurnover[]   @relation("TurnoverReceivedBy")
  returns             PropertyReturn[]     @relation("ReturnedBy")
  receivedReturns     PropertyReturn[]     @relation("ReturnReceivedBy")
  auditLogs           AuditLog[]
  createdDocuments    Document[]           @relation("DocumentCreator")
  updatedDocuments    Document[]           @relation("DocumentUpdater")

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions Json // Store permissions as JSON array
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  businessUnitMembers BusinessUnitMember[]

  @@map("roles")
}

// Business Unit Management
model BusinessUnit {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  address     String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  members    BusinessUnitMember[]
  properties Property[]

  @@map("business_units")
}

model BusinessUnitMember {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  businessUnitId String   @map("business_unit_id")
  roleId         String   @map("role_id")
  isActive       Boolean  @default(true) @map("is_active")
  joinedAt       DateTime @default(now()) @map("joined_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id])

  @@unique([userId, businessUnitId])
  @@map("business_unit_members")
}

// Property Management
model Property {
  id                     String                 @id @default(uuid())
  titleNumber            String                 @unique @map("title_number")
  lotNumber              String                 @map("lot_number")
  location               String
  area                   Decimal                @db.Decimal(10, 2) // Area in square meters
  description            String?                @db.Text
  registeredOwner        String                 @map("registered_owner")
  encumbranceMortgage    String?                @map("encumbrance_mortgage") @db.Text
  borrowerMortgagor      String?                @map("borrower_mortgagor")
  bank                   String?
  custodyOriginalTitle   String?                @map("custody_original_title")
  propertyClassification PropertyClassification @map("property_classification")
  status                 PropertyStatus
  taxDeclaration         String?                @map("tax_declaration")
  remarks                String?                @db.Text
  businessUnitId         String                 @map("business_unit_id")
  createdById            String                 @map("created_by_id")
  updatedById            String?                @map("updated_by_id")
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")

  // Relations
  businessUnit BusinessUnit       @relation(fields: [businessUnitId], references: [id])
  createdBy    User               @relation("PropertyCreator", fields: [createdById], references: [id])
  updatedBy    User?              @relation("PropertyUpdater", fields: [updatedById], references: [id])
  approvals    PropertyApproval[]
  releases     PropertyRelease[]
  turnovers    PropertyTurnover[]
  returns      PropertyReturn[]
  auditLogs    AuditLog[]
  rptRecords   RealPropertyTax[]
  documents    Document[]

  @@map("properties")
}

// Real Property Tax Management
model RealPropertyTax {
  id                   String              @id @default(uuid())
  propertyId           String              @map("property_id")
  taxYear              Int                 @map("tax_year")
  assessedValue        Decimal             @map("assessed_value") @db.Decimal(15, 2)
  taxRate              Decimal             @map("tax_rate") @db.Decimal(5, 4) // Percentage as decimal (e.g., 0.02 for 2%)
  basicTax             Decimal             @map("basic_tax") @db.Decimal(15, 2)
  specialEducationFund Decimal?            @map("special_education_fund") @db.Decimal(15, 2)
  penalty              Decimal?            @default(0) @db.Decimal(15, 2)
  discount             Decimal?            @default(0) @db.Decimal(15, 2)
  totalAmountDue       Decimal             @map("total_amount_due") @db.Decimal(15, 2)
  paymentSchedule      PaymentScheduleType @map("payment_schedule")
  dueDate              DateTime            @map("due_date")
  status               RPTStatus           @default(UNPAID)
  remarks              String?             @db.Text
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")

  // Relations
  property  Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  payments  RPTPayment[]
  documents Document[]

  @@unique([propertyId, taxYear, paymentSchedule])
  @@map("real_property_taxes")
}

// RPT Payment Records
model RPTPayment {
  id              String   @id @default(uuid())
  rptId           String   @map("rpt_id")
  paymentDate     DateTime @map("payment_date")
  amountPaid      Decimal  @map("amount_paid") @db.Decimal(15, 2)
  paymentMethod   String   @map("payment_method") // CASH, CHECK, ONLINE, BANK_TRANSFER, etc.
  referenceNumber String?  @map("reference_number")
  receiptNumber   String?  @map("receipt_number")
  remarks         String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  realPropertyTax RealPropertyTax @relation(fields: [rptId], references: [id], onDelete: Cascade)
  documents       Document[]

  @@map("rpt_payments")
}

// Document Management
model Document {
  id           String       @id @default(uuid())
  fileName     String       @map("file_name")
  originalName String       @map("original_name")
  fileSize     Int          @map("file_size") // Size in bytes
  mimeType     String       @map("mime_type")
  filePath     String       @map("file_path") // Storage path or URL
  documentType DocumentType @map("document_type")
  description  String?      @db.Text

  // Polymorphic relations - only one should be set
  propertyId   String? @map("property_id")
  rptId        String? @map("rpt_id")
  rptPaymentId String? @map("rpt_payment_id")

  isActive    Boolean  @default(true) @map("is_active")
  createdById String   @map("created_by_id")
  updatedById String?  @map("updated_by_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  property        Property?        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  realPropertyTax RealPropertyTax? @relation(fields: [rptId], references: [id], onDelete: Cascade)
  rptPayment      RPTPayment?      @relation(fields: [rptPaymentId], references: [id], onDelete: Cascade)
  createdBy       User             @relation("DocumentCreator", fields: [createdById], references: [id])
  updatedBy       User?            @relation("DocumentUpdater", fields: [updatedById], references: [id])

  @@map("documents")
}

// Property Approval System
model PropertyApproval {
  id         String         @id @default(uuid())
  propertyId String         @map("property_id")
  approvedBy String         @map("approved_by")
  status     ApprovalStatus
  comments   String?        @db.Text
  approvedAt DateTime?      @map("approved_at")
  createdAt  DateTime       @default(now()) @map("created_at")

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  approver User     @relation(fields: [approvedBy], references: [id])

  @@map("property_approvals")
}

// Property Release Management
model PropertyRelease {
  id                String    @id @default(uuid())
  propertyId        String    @map("property_id")
  dateReleased      DateTime? @map("date_released")
  releasedById      String?   @map("released_by_id")
  purposeOfRelease  String?   @map("purpose_of_release") @db.Text
  approvedById      String?   @map("approved_by_id")
  receivedById      String?   @map("received_by_id")
  transmittalNumber String?   @map("transmittal_number")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  releasedBy User?    @relation("ReleasedBy", fields: [releasedById], references: [id])
  approvedBy User?    @relation("ApprovedByRelease", fields: [approvedById], references: [id])
  receivedBy User?    @relation("ReceivedByRelease", fields: [receivedById], references: [id])

  @@map("property_releases")
}

// Property Turnover Management
model PropertyTurnover {
  id             String    @id @default(uuid())
  propertyId     String    @map("property_id")
  turnedOverDate DateTime? @map("turned_over_date")
  turnedOverById String?   @map("turned_over_by_id")
  receivedById   String?   @map("received_by_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  turnedOverBy User?    @relation("TurnedOverBy", fields: [turnedOverById], references: [id])
  receivedBy   User?    @relation("TurnoverReceivedBy", fields: [receivedById], references: [id])

  @@map("property_turnovers")
}

// Property Return Management
model PropertyReturn {
  id           String    @id @default(uuid())
  propertyId   String    @map("property_id")
  dateReturned DateTime? @map("date_returned")
  returnedById String?   @map("returned_by_id")
  receivedById String?   @map("received_by_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  returnedBy User?    @relation("ReturnedBy", fields: [returnedById], references: [id])
  receivedBy User?    @relation("ReturnReceivedBy", fields: [receivedById], references: [id])

  @@map("property_returns")
}

// Audit Trail
model AuditLog {
  id         String   @id @default(uuid())
  action     String // CREATE, UPDATE, DELETE, APPROVE, RELEASE, etc.
  entity     String // Property, User, BusinessUnit, etc.
  entityId   String   @map("entity_id")
  propertyId String?  @map("property_id") // Optional relation to property
  userId     String   @map("user_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  property Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// Enums
enum PropertyClassification {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  AGRICULTURAL
  INSTITUTIONAL
  MIXED_USE
  VACANT_LOT
  OTHER

  @@map("property_classification")
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  PENDING
  RELEASED
  RETURNED
  UNDER_REVIEW
  DISPUTED

  @@map("property_status")
}

enum ApprovalWorkflowStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  CANCELLED
  EXPIRED

  @@map("approval_workflow_status")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
  SKIPPED
  EXPIRED

  @@map("approval_status")
}

enum PaymentScheduleType {
  QUARTERLY_Q1 // First Quarter
  QUARTERLY_Q2 // Second Quarter
  QUARTERLY_Q3 // Third Quarter
  QUARTERLY_Q4 // Fourth Quarter
  ANNUAL // Full Year
  SEMI_ANNUAL_H1 // First Half
  SEMI_ANNUAL_H2 // Second Half

  @@map("payment_schedule_type")
}

enum RPTStatus {
  UNPAID
  PARTIALLY_PAID
  FULLY_PAID
  OVERDUE
  DISPUTED
  WAIVED

  @@map("rpt_status")
}

enum DocumentType {
  // Property Documents
  TITLE_DEED
  TAX_DECLARATION
  SURVEY_PLAN
  LOCATION_MAP
  PHOTOS
  APPRAISAL_REPORT
  MORTGAGE_DOCUMENT

  // RPT Documents
  TAX_BILL
  PAYMENT_RECEIPT
  TAX_CLEARANCE
  ASSESSMENT_NOTICE

  // General Documents
  CORRESPONDENCE
  LEGAL_DOCUMENT
  COMPLIANCE_CERTIFICATE
  OTHER

  @@map("document_type")
}
