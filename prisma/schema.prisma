// Property Management System - Enhanced Prisma Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Enhanced User and Role Management
model User {
  id            String    @id @default(uuid())
  username      String?   @unique
  firstName     String?
  lastName      String?
  passwordHash  String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  isActive      Boolean   @default(true) @map("is_active")

  // No direct role assignment - roles come through business unit memberships

  // Relations
  accounts            Account[]
  sessions            Session[]
  businessUnitMembers BusinessUnitMember[] // This is how users get roles
  createdProperties   Property[]             @relation("PropertyCreator")
  updatedProperties   Property[]             @relation("PropertyUpdater")
  custodianProperties Property[]             @relation("PropertyCustodian")
  approvalRequests    ApprovalRequest[]      @relation("ApprovalRequestedBy")
  approvalResponses   ApprovalStepResponse[]
  releases            PropertyRelease[]      @relation("ReleasedBy")
  releaseApprovals    PropertyRelease[]      @relation("ReleaseApprovedBy")
  releaseReceivers    PropertyRelease[]      @relation("ReleaseReceivedBy")
  turnovers           PropertyTurnover[]     @relation("TurnedOverBy")
  turnoverReceivers   PropertyTurnover[]     @relation("TurnoverReceivedBy")
  turnoverApprovals   PropertyTurnover[]     @relation("TurnoverApprovedBy")
  returns             PropertyReturn[]       @relation("ReturnedBy")
  returnReceivers     PropertyReturn[]       @relation("ReturnReceivedBy")
  returnApprovals     PropertyReturn[]       @relation("ReturnApprovedBy")
  auditLogs           AuditLog[]
  createdDocuments    Document[]             @relation("DocumentCreator")
  updatedDocuments    Document[]             @relation("DocumentUpdater")

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  level       Int      @default(0) // 0=Staff, 1=Manager, 2=Director, 3=VP, 4=Managing Director
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  businessUnitMembers BusinessUnitMember[]
  permissions         RolePermissions[]
  approvalSteps       ApprovalStep[]

  @@map("roles")
}

// Boolean-based permissions
model RolePermissions {
  id         String  @id @default(uuid())
  roleId     String  @map("role_id")
  module     String // e.g., "PROPERTY", "RPT", "USER_MANAGEMENT"
  canCreate  Boolean @default(false) @map("can_create")
  canRead    Boolean @default(false) @map("can_read")
  canUpdate  Boolean @default(false) @map("can_update")
  canDelete  Boolean @default(false) @map("can_delete")
  canApprove Boolean @default(false) @map("can_approve")

  // Relations
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, module])
  @@map("role_permissions")
}

// Business Unit Management
model BusinessUnit {
  id            String           @id @default(uuid())
  name          String           @unique
  description   String?
  address       String?
  contactPerson String?          @map("contact_person")
  contactEmail  String?          @map("contact_email")
  contactPhone  String?          @map("contact_phone")
  unitType      BusinessUnitType @map("unit_type")
  isActive      Boolean          @default(true) @map("is_active")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // Relations
  members       BusinessUnitMember[]
  properties    Property[]
  releases      PropertyRelease[]
  turnoversFrom PropertyTurnover[]   @relation("TurnoversFrom")
  turnoversTo   PropertyTurnover[]   @relation("TurnoversTo")
  returns       PropertyReturn[]

  @@map("business_units")
}

model BusinessUnitMember {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  businessUnitId String   @map("business_unit_id")
  roleId         String   @map("role_id")
  isActive       Boolean  @default(true) @map("is_active")
  joinedAt       DateTime @default(now()) @map("joined_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id])

  @@unique([userId, businessUnitId])
  @@map("business_unit_members")
}

// Bank Management for Document Custody
model Bank {
  id            String   @id @default(uuid())
  name          String
  branchName    String   @map("branch_name")
  address       String?
  contactPerson String   @map("contact_person")
  contactEmail  String?  @map("contact_email")
  contactPhone  String?  @map("contact_phone")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  properties Property[]
  releases   PropertyRelease[]

  @@unique([name, branchName])
  @@map("banks")
}

// Enhanced Property Management
model Property {
  id                     String                 @id @default(uuid())
  propertyName           String                 @map("property_name")
  titleNumber            String                 @unique @map("title_number")
  lotNumber              String                 @map("lot_number")
  location               String
  area                   Decimal                @db.Decimal(10, 2)
  description            String?                @db.Text
  registeredOwner        String                 @map("registered_owner")
  encumbranceMortgage    String?                @map("encumbrance_mortgage") @db.Text
  borrowerMortgagor      String?                @map("borrower_mortgagor")
  bankId                 String?                @map("bank_id") // Current bank custody
  custodianId            String                 @map("custodian_id") // Current custodian
  propertyClassification PropertyClassification @map("property_classification")
  status                 PropertyStatus
  currentLocation        PropertyLocation       @map("current_location")
  taxDeclaration         String?                @map("tax_declaration")
  remarks                String?                @db.Text
  businessUnitId         String                 @map("business_unit_id")
  createdById            String                 @map("created_by_id")
  updatedById            String?                @map("updated_by_id")
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")

  // Relations
  businessUnit     BusinessUnit       @relation(fields: [businessUnitId], references: [id])
  createdBy        User               @relation("PropertyCreator", fields: [createdById], references: [id])
  updatedBy        User?              @relation("PropertyUpdater", fields: [updatedById], references: [id])
  custodian        User               @relation("PropertyCustodian", fields: [custodianId], references: [id])
  bank             Bank?              @relation(fields: [bankId], references: [id])
  releases         PropertyRelease[]
  turnovers        PropertyTurnover[]
  returns          PropertyReturn[]
  movements        PropertyMovement[]
  auditLogs        AuditLog[]
  rptRecords       RealPropertyTax[]
  documents        Document[]
  approvalRequests ApprovalRequest[]

  @@map("properties")
}

// Property Movement Tracking
model PropertyMovement {
  id                 String           @id @default(uuid())
  propertyId         String           @map("property_id")
  movementType       MovementType     @map("movement_type")
  fromLocation       PropertyLocation @map("from_location")
  toLocation         PropertyLocation @map("to_location")
  fromCustodian      String?          @map("from_custodian")
  toCustodian        String?          @map("to_custodian")
  bankId             String?          @map("bank_id")
  businessUnitId     String?          @map("business_unit_id")
  referenceId        String?          @map("reference_id") // Links to release/return/turnover
  referenceType      String?          @map("reference_type") // "RELEASE", "RETURN", "TURNOVER"
  movementDate       DateTime         @map("movement_date")
  expectedReturnDate DateTime?        @map("expected_return_date")
  notes              String?          @db.Text
  createdAt          DateTime         @default(now()) @map("created_at")

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_movements")
}

// Enhanced Approval System
model ApprovalWorkflow {
  id          String   @id @default(uuid())
  name        String   @unique // "Property Release", "Property Return", "Property Turnover"
  description String?
  entityType  String // "PROPERTY_RELEASE", "PROPERTY_RETURN", "PROPERTY_TURNOVER"
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  steps    ApprovalStep[]
  requests ApprovalRequest[]

  @@map("approval_workflows")
}

model ApprovalStep {
  id               String  @id @default(uuid())
  workflowId       String  @map("workflow_id")
  stepOrder        Int     @map("step_order")
  stepName         String  @map("step_name") // "Manager Approval", "Director Approval"
  roleId           String  @map("role_id")
  isRequired       Boolean @default(true) @map("is_required")
  canOverride      Boolean @default(false) @map("can_override") // VP/MD can override
  overrideMinLevel Int?    @map("override_min_level") // Minimum role level to override

  workflow  ApprovalWorkflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  role      Role                   @relation(fields: [roleId], references: [id])
  responses ApprovalStepResponse[]

  @@unique([workflowId, stepOrder])
  @@map("approval_steps")
}

model ApprovalRequest {
  id               String                @id @default(uuid())
  workflowId       String                @map("workflow_id")
  entityType       String                @map("entity_type") // "PROPERTY_RELEASE", etc.
  entityId         String                @map("entity_id") // ID of release/return/turnover
  propertyId       String                @map("property_id")
  requestedById    String                @map("requested_by_id")
  currentStepOrder Int                   @default(1) @map("current_step_order")
  status           ApprovalRequestStatus
  isOverridden     Boolean               @default(false) @map("is_override")
  overriddenById   String?               @map("overridden_by_id")
  overriddenAt     DateTime?             @map("overridden_at")
  overrideReason   String?               @map("override_reason") @db.Text
  completedAt      DateTime?             @map("completed_at")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")

  workflow    ApprovalWorkflow       @relation(fields: [workflowId], references: [id])
  property    Property               @relation(fields: [propertyId], references: [id])
  requestedBy User                   @relation("ApprovalRequestedBy", fields: [requestedById], references: [id])
  responses   ApprovalStepResponse[]

  @@map("approval_requests")
}

model ApprovalStepResponse {
  id                String         @id @default(uuid())
  approvalRequestId String         @map("approval_request_id")
  stepId            String         @map("step_id")
  respondedById     String         @map("responded_by_id")
  status            ApprovalStatus
  comments          String?        @db.Text
  respondedAt       DateTime       @default(now()) @map("responded_at")
  isOverride        Boolean        @default(false) @map("is_override")

  approvalRequest ApprovalRequest @relation(fields: [approvalRequestId], references: [id], onDelete: Cascade)
  step            ApprovalStep    @relation(fields: [stepId], references: [id])
  respondedBy     User            @relation(fields: [respondedById], references: [id])

  @@unique([approvalRequestId, stepId])
  @@map("approval_step_responses")
}

// Property Release Management
model PropertyRelease {
  id                 String            @id @default(uuid())
  propertyId         String            @map("property_id")
  releaseType        ReleaseType       @map("release_type")
  businessUnitId     String?           @map("business_unit_id") // For subsidiary releases
  bankId             String?           @map("bank_id") // For bank releases
  dateReleased       DateTime?         @map("date_released")
  expectedReturnDate DateTime?         @map("expected_return_date")
  releasedById       String?           @map("released_by_id")
  purposeOfRelease   String            @map("purpose_of_release") @db.Text
  approvedById       String?           @map("approved_by_id")
  receivedById       String?           @map("received_by_id")
  receivedByName     String?           @map("received_by_name") // External person name
  transmittalNumber  String?           @map("transmittal_number")
  status             TransactionStatus @default(PENDING)
  approvalRequestId  String?           @map("approval_request_id")
  notes              String?           @db.Text
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")

  // Relations
  property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  businessUnit BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  bank         Bank?         @relation(fields: [bankId], references: [id])
  releasedBy   User?         @relation("ReleasedBy", fields: [releasedById], references: [id])
  approvedBy   User?         @relation("ReleaseApprovedBy", fields: [approvedById], references: [id])
  receivedBy   User?         @relation("ReleaseReceivedBy", fields: [receivedById], references: [id])
  documents    Document[]

  @@map("property_releases")
}

// Property Turnover Management
model PropertyTurnover {
  id                 String            @id @default(uuid())
  propertyId         String            @map("property_id")
  turnoverType       TurnoverType      @map("turnover_type")
  fromBusinessUnitId String?           @map("from_business_unit_id")
  toBusinessUnitId   String?           @map("to_business_unit_id")
  turnedOverDate     DateTime?         @map("turned_over_date")
  turnedOverById     String?           @map("turned_over_by_id")
  receivedById       String?           @map("received_by_id")
  approvedById       String?           @map("approved_by_id")
  purpose            String?           @db.Text
  status             TransactionStatus @default(PENDING)
  approvalRequestId  String?           @map("approval_request_id")
  notes              String?           @db.Text
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")

  // Relations
  property         Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  fromBusinessUnit BusinessUnit? @relation("TurnoversFrom", fields: [fromBusinessUnitId], references: [id])
  toBusinessUnit   BusinessUnit? @relation("TurnoversTo", fields: [toBusinessUnitId], references: [id])
  turnedOverBy     User?         @relation("TurnedOverBy", fields: [turnedOverById], references: [id])
  receivedBy       User?         @relation("TurnoverReceivedBy", fields: [receivedById], references: [id])
  approvedBy       User?         @relation("TurnoverApprovedBy", fields: [approvedById], references: [id])
  documents        Document[]

  @@map("property_turnovers")
}

// Property Return Management
model PropertyReturn {
  id                String            @id @default(uuid())
  propertyId        String            @map("property_id")
  returnType        ReturnType        @map("return_type")
  businessUnitId    String?           @map("business_unit_id") // From which unit
  dateReturned      DateTime?         @map("date_returned")
  returnedById      String?           @map("returned_by_id")
  receivedById      String?           @map("received_by_id")
  approvedById      String?           @map("approved_by_id")
  returnedByName    String?           @map("returned_by_name") // External person name
  reasonForReturn   String?           @map("reason_for_return") @db.Text
  condition         String? // Condition of documents upon return
  status            TransactionStatus @default(PENDING)
  approvalRequestId String?           @map("approval_request_id")
  notes             String?           @db.Text
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  // Relations
  property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  businessUnit BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  returnedBy   User?         @relation("ReturnedBy", fields: [returnedById], references: [id])
  receivedBy   User?         @relation("ReturnReceivedBy", fields: [receivedById], references: [id])
  approvedBy   User?         @relation("ReturnApprovedBy", fields: [approvedById], references: [id])
  documents    Document[]

  @@map("property_returns")
}

// Real Property Tax Management
model RealPropertyTax {
  id                   String              @id @default(uuid())
  propertyId           String              @map("property_id")
  taxYear              Int                 @map("tax_year")
  assessedValue        Decimal             @map("assessed_value") @db.Decimal(15, 2)
  taxRate              Decimal             @map("tax_rate") @db.Decimal(5, 4)
  basicTax             Decimal             @map("basic_tax") @db.Decimal(15, 2)
  specialEducationFund Decimal?            @map("special_education_fund") @db.Decimal(15, 2)
  penalty              Decimal?            @default(0) @db.Decimal(15, 2)
  discount             Decimal?            @default(0) @db.Decimal(15, 2)
  totalAmountDue       Decimal             @map("total_amount_due") @db.Decimal(15, 2)
  paymentSchedule      PaymentScheduleType @map("payment_schedule")
  dueDate              DateTime            @map("due_date")
  status               RPTStatus           @default(UNPAID)
  remarks              String?             @db.Text
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")

  // Relations
  property  Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  payments  RPTPayment[]
  documents Document[]
  reminders RPTReminder[]

  @@unique([propertyId, taxYear, paymentSchedule])
  @@map("real_property_taxes")
}

model RPTPayment {
  id              String   @id @default(uuid())
  rptId           String   @map("rpt_id")
  paymentDate     DateTime @map("payment_date")
  amountPaid      Decimal  @map("amount_paid") @db.Decimal(15, 2)
  paymentMethod   String   @map("payment_method")
  referenceNumber String?  @map("reference_number")
  receiptNumber   String?  @map("receipt_number")
  remarks         String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  realPropertyTax RealPropertyTax @relation(fields: [rptId], references: [id], onDelete: Cascade)
  documents       Document[]

  @@map("rpt_payments")
}

model RPTReminder {
  id           String       @id @default(uuid())
  rptId        String       @map("rpt_id")
  reminderDate DateTime     @map("reminder_date")
  reminderType ReminderType @map("reminder_type")
  isSent       Boolean      @default(false) @map("is_sent")
  sentAt       DateTime?    @map("sent_at")
  createdAt    DateTime     @default(now()) @map("created_at")

  realPropertyTax RealPropertyTax @relation(fields: [rptId], references: [id], onDelete: Cascade)

  @@map("rpt_reminders")
}

// Document Management
model Document {
  id           String       @id @default(uuid())
  fileName     String       @map("file_name")
  originalName String       @map("original_name")
  fileSize     Int          @map("file_size")
  mimeType     String       @map("mime_type")
  filePath     String       @map("file_path")
  documentType DocumentType @map("document_type")
  description  String?      @db.Text

  // Polymorphic relations
  propertyId         String? @map("property_id")
  rptId              String? @map("rpt_id")
  rptPaymentId       String? @map("rpt_payment_id")
  propertyReleaseId  String? @map("property_release_id")
  propertyTurnoverId String? @map("property_turnover_id")
  propertyReturnId   String? @map("property_return_id")

  isActive    Boolean  @default(true) @map("is_active")
  createdById String   @map("created_by_id")
  updatedById String?  @map("updated_by_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  property         Property?         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  realPropertyTax  RealPropertyTax?  @relation(fields: [rptId], references: [id], onDelete: Cascade)
  rptPayment       RPTPayment?       @relation(fields: [rptPaymentId], references: [id], onDelete: Cascade)
  propertyRelease  PropertyRelease?  @relation(fields: [propertyReleaseId], references: [id], onDelete: Cascade)
  propertyTurnover PropertyTurnover? @relation(fields: [propertyTurnoverId], references: [id], onDelete: Cascade)
  propertyReturn   PropertyReturn?   @relation(fields: [propertyReturnId], references: [id], onDelete: Cascade)
  createdBy        User              @relation("DocumentCreator", fields: [createdById], references: [id])
  updatedBy        User?             @relation("DocumentUpdater", fields: [updatedById], references: [id])

  @@map("documents")
}

// Audit Trail
model AuditLog {
  id         String   @id @default(uuid())
  action     String
  entity     String
  entityId   String   @map("entity_id")
  propertyId String?  @map("property_id")
  userId     String   @map("user_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  property Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// Enums
enum BusinessUnitType {
  MAIN_OFFICE
  SUBSIDIARY
  BRANCH
  EXTERNAL_ORGANIZATION

  @@map("business_unit_type")
}

enum PropertyClassification {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  AGRICULTURAL
  INSTITUTIONAL
  MIXED_USE
  VACANT_LOT
  OTHER

  @@map("property_classification")
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  PENDING
  RELEASED
  RETURNED
  UNDER_REVIEW
  DISPUTED
  BANK_CUSTODY

  @@map("property_status")
}

enum PropertyLocation {
  MAIN_OFFICE
  SUBSIDIARY_COMPANY
  BANK_CUSTODY
  EXTERNAL_HOLDER
  IN_TRANSIT

  @@map("property_location")
}

enum MovementType {
  RELEASE_TO_SUBSIDIARY
  RELEASE_TO_BANK
  RETURN_FROM_SUBSIDIARY
  RETURN_FROM_BANK
  TURNOVER_INTERNAL
  CUSTODY_CHANGE

  @@map("movement_type")
}

enum ReleaseType {
  TO_SUBSIDIARY
  TO_BANK
  TO_EXTERNAL

  @@map("release_type")
}

enum TurnoverType {
  INTERNAL_DEPARTMENT
  BETWEEN_SUBSIDIARIES
  CUSTODY_TRANSFER

  @@map("turnover_type")
}

enum ReturnType {
  FROM_SUBSIDIARY
  FROM_BANK
  FROM_EXTERNAL

  @@map("return_type")
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERRIDDEN

  @@map("transaction_status")
}

enum ApprovalRequestStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  CANCELLED
  OVERRIDDEN
  EXPIRED

  @@map("approval_request_status")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
  SKIPPED
  EXPIRED

  @@map("approval_status")
}

enum PaymentScheduleType {
  QUARTERLY_Q1
  QUARTERLY_Q2
  QUARTERLY_Q3
  QUARTERLY_Q4
  ANNUAL
  SEMI_ANNUAL_H1
  SEMI_ANNUAL_H2

  @@map("payment_schedule_type")
}

enum RPTStatus {
  UNPAID
  PARTIALLY_PAID
  FULLY_PAID
  OVERDUE
  DISPUTED
  WAIVED

  @@map("rpt_status")
}

enum ReminderType {
  DUE_SOON
  OVERDUE
  PENALTY_APPLIED
  PAYMENT_REQUIRED

  @@map("reminder_type")
}

enum DocumentType {
  // Property Documents
  TITLE_DEED
  TAX_DECLARATION
  SURVEY_PLAN
  LOCATION_MAP
  PHOTOS
  APPRAISAL_REPORT
  MORTGAGE_DOCUMENT

  // RPT Documents
  TAX_BILL
  PAYMENT_RECEIPT
  TAX_CLEARANCE
  ASSESSMENT_NOTICE

  // Transaction Documents
  RELEASE_FORM
  TURNOVER_RECEIPT
  RETURN_RECEIPT
  APPROVAL_DOCUMENT

  // General Documents
  CORRESPONDENCE
  LEGAL_DOCUMENT
  COMPLIANCE_CERTIFICATE
  OTHER

  @@map("document_type")
}
